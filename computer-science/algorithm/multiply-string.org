#+title: Multiply String
* Description
Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.

Note: You must not use any built-in BigInteger library or convert the inputs to integer directly.

** Example
Example 1:
#+begin_comment
Input: num1 = "2", num2 = "3"
Output: "6"
#+end_comment


Example 2:

#+begin_comment
Input: num1 = "123", num2 = "456"
Output: "56088"
#+end_comment
** Constraints:
- 1 <= num1.length, num2.length <= 200
- num1 and num2 consist of digits only.
- Both num1 and num2 do not contain any leading zero, except the number 0 itself.
* Solution
The idea is to create a array to sotre all the number.

Was trying to convert the string to int. and then apply the mulply of the two number, failed with the case
#+begin_src java
"123456789", "987654321"
#+end_src
Have to use BigInteger which is not allowed here.

** Code
#+begin_src java
class Solution {
    public String multiply(String num1, String num2) {
        if (num1.equals("0") || num2.equals("0"))
            return "0";
        int length1 = num1.length();
        int length2 = num2.length();

        int[] pos = new int[length1 + length2];

        for(int i = length1 - 1; i>=0; i--) {
            for(int k = length2 -1; k >=0; k--) {
                int mulplyResult = (num1.charAt(i) - '0') * (num2.charAt(k) - '0');
                int p1 = k + i, p2 = k + i + 1;
                int sum = pos[p2] + mulplyResult;
                pos[p2] = sum%10;
                pos[p1] += sum/10;
            }
        }

        StringBuilder sb = new StringBuilder();
        for(int p : pos) {
            if(sb.length() == 0 && p == 0) continue;
            sb.append(p);
        }
        return sb.toString();
    }
}
#+end_src

                   1   2   3     <<<< when i = 1, we take 2
                   3   4   5     <<<< when k = 2, we take 5
              ---------------
                   1   0

     [{0}|{1}|{2}|{3}|{4}|{5}]  <<<<< p1 is bucket 3, p2 is bucket 4
